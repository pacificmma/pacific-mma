rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isInstructor() {
      return hasRole('instructor') || isAdmin();
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPhoneNumber(phone) {
      return phone.matches('^\\+?[1-9]\\d{1,14}$');
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'displayName', 'joinedDate']) &&
        isValidEmail(request.resource.data.email);
      allow update: if (isOwner(userId) || isAdmin()) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'membershipType']) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Classes collection
    match /classes/{classId} {
      allow read: if true; // Public read
      allow create: if isInstructor() &&
        request.resource.data.keys().hasAll(['title', 'instructor', 'date', 'capacity']) &&
        request.resource.data.capacity > 0 &&
        request.resource.data.capacity <= 50;
      allow update: if isInstructor() &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['enrolled']) || 
         request.resource.data.enrolled <= request.resource.data.capacity);
      allow delete: if isAdmin();
    }
    
    // Enrollments collection
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isInstructor());
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['classId', 'userId', 'enrolledAt']);
      allow update: if false; // Enrollments should not be updated
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Memberships collection
    match /memberships/{membershipId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Payments collection - highly sensitive
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if false; // Only through secure server-side functions
      allow update: if false;
      allow delete: if false;
    }
    
    // Products/Services collection
    match /products/{productId} {
      allow read: if true; // Public read
      allow write: if isAdmin();
    }
    
    // Cart items (user-specific subcollection)
    match /users/{userId}/cart/{itemId} {
      allow read, write: if isOwner(userId);
    }
    
    // User notifications
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAdmin() || isInstructor();
      allow update: if isOwner(userId) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow delete: if isOwner(userId);
    }
    
    // Notify requests collection - for tour notifications
    match /notify_requests/{requestId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if true; // Allow anyone to create notification requests
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Destinations collection
    match /destinations/{destinationId} {
      allow read: if true; // Public read
      allow write: if isAdmin();
    }
    
    // Email logs collection - admin only
    match /email_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
    
    // Activity logs collection
    match /activity_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
    
    // Audit logs - write only, no updates
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
  }
}